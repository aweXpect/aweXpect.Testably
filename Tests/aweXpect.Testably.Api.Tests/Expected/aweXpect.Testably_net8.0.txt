[assembly: System.Reflection.AssemblyMetadata("RepositoryUrl", "https://github.com/aweXpect/aweXpect.Testably.git")]
[assembly: System.Runtime.Versioning.TargetFramework(".NETCoreApp,Version=v8.0", FrameworkDisplayName=".NET 8.0")]
namespace aweXpect.Testably
{
    public static class DirectoryInfoExtensions
    {
        public static aweXpect.Core.IThat<System.IO.Abstractions.IDirectoryInfo> Should(this aweXpect.Core.IExpectSubject<System.IO.Abstractions.IDirectoryInfo> subject) { }
    }
    public static class FileInfoExtensions
    {
        public static aweXpect.Results.StringEqualityTypeResult<System.IO.Abstractions.IFileInfo, aweXpect.Core.IThat<System.IO.Abstractions.IFileInfo>> HaveContent(this aweXpect.Core.IThat<System.IO.Abstractions.IFileInfo> source, string? expected) { }
        public static aweXpect.Core.IThat<System.IO.Abstractions.IFileInfo> Should(this aweXpect.Core.IExpectSubject<System.IO.Abstractions.IFileInfo> subject) { }
    }
    public static class FileSystemExtensions
    {
        public static aweXpect.Testably.Results.DirectoryResult<TFileSystem> HaveDirectory<TFileSystem>(this aweXpect.Core.IThat<TFileSystem> subject, string path)
            where TFileSystem : System.IO.Abstractions.IFileSystem { }
        public static aweXpect.Testably.Results.FileResult<TFileSystem> HaveFile<TFileSystem>(this aweXpect.Core.IThat<TFileSystem> subject, string path)
            where TFileSystem : System.IO.Abstractions.IFileSystem { }
        public static aweXpect.Core.IThat<TFileSystem> Should<TFileSystem>(this aweXpect.Core.IExpectSubject<TFileSystem> subject)
            where TFileSystem : System.IO.Abstractions.IFileSystem { }
    }
}
namespace aweXpect.Testably.Results
{
    public class DirectoryResult<TFileSystem> : aweXpect.Results.AndOrResult<System.IO.Abstractions.IFileSystem, aweXpect.Core.IThat<TFileSystem>>
        where TFileSystem : System.IO.Abstractions.IFileSystem
    {
        public DirectoryResult(aweXpect.Core.ExpectationBuilder expectationBuilder, aweXpect.Core.IThat<TFileSystem> subject, string path) { }
        public aweXpect.Testably.Results.DirectoryResult<TFileSystem> WithDirectories(System.Action<aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<System.IO.Abstractions.IDirectoryInfo>>> expectations) { }
        public aweXpect.Testably.Results.DirectoryResult<TFileSystem> WithFiles(System.Action<aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<System.IO.Abstractions.IFileInfo>>> expectations) { }
    }
    public class FileResult<TFileSystem> : aweXpect.Results.AndOrResult<System.IO.Abstractions.IFileSystem, aweXpect.Core.IThat<TFileSystem>>
        where TFileSystem : System.IO.Abstractions.IFileSystem
    {
        public FileResult(aweXpect.Core.ExpectationBuilder expectationBuilder, aweXpect.Core.IThat<TFileSystem> subject, string path) { }
        public aweXpect.Results.StringEqualityTypeResult<TFileSystem, aweXpect.Testably.Results.FileResult<TFileSystem>> WhichContent(System.Action<aweXpect.Core.IExpectSubject<string?>> expectations) { }
        public aweXpect.Results.StringEqualityTypeResult<TFileSystem, aweXpect.Testably.Results.FileResult<TFileSystem>> WithContent(string expected) { }
        public aweXpect.Results.TimeToleranceResult<TFileSystem, aweXpect.Testably.Results.FileResult<TFileSystem>> WithCreationTime(System.DateTime expected) { }
        public aweXpect.Results.TimeToleranceResult<TFileSystem, aweXpect.Testably.Results.FileResult<TFileSystem>> WithLastAccessTime(System.DateTime expected) { }
        public aweXpect.Results.TimeToleranceResult<TFileSystem, aweXpect.Testably.Results.FileResult<TFileSystem>> WithLastWriteTime(System.DateTime expected) { }
    }
}